--VACCINES

--FUNCTIONS FOR VALIDATE IF THERE IS A VACCINE

DROP FUNCTION IF EXISTS VACCINE_EXISTS_NAME;
DELIMITER $$
CREATE FUNCTION VACCINE_EXISTS_NAME(vaccine_name VARCHAR(16)) RETURNS BOOLEAN DETERMINISTIC
BEGIN
    DECLARE v_name VARCHAR(16);
    SELECT v.vaccine_name FROM vaccine v WHERE v.vaccine_name = vaccine_name INTO v_name;
    IF v_name IS NULL THEN
		RETURN FALSE;
    END IF;
	RETURN TRUE;
END $$
DELIMITER ;

DROP FUNCTION IF EXISTS VACCINE_EXISTS_ID;
DELIMITER $$
CREATE FUNCTION VACCINE_EXISTS_ID(id_vaccine INT) RETURNS BOOLEAN DETERMINISTIC
BEGIN
    DECLARE id INT;
    SELECT v.id_vaccine FROM vaccine v WHERE v.id_vaccine = id_vaccine INTO id;
    IF id IS NULL THEN
		RETURN FALSE;
    END IF;
	RETURN TRUE;
END $$
DELIMITER ;
-- FUNCTONS FOR INVENTORY

DROP FUNCTION IF EXISTS INVENTORY_EXISTS_ID;
DELIMITER $$
CREATE FUNCTION INVENTORY_EXISTS_ID(id_vaccine INT) RETURNS BOOLEAN DETERMINISTIC
BEGIN
    DECLARE id INT;
    SELECT i.id_vaccine FROM inventory i WHERE i.id_vaccine = id_inventory INTO id;
    IF id IS NULL THEN
		RETURN FALSE;
    END IF;
	RETURN TRUE;
END $$
DELIMITER ;

DROP PROCEDURE IF EXISTS GET_VACCINES; -- OBTIENE TODAS LAS VACUNAS DE LA TABLA
DELIMITER ;;
CREATE PROCEDURE GET_VACCINES()
BEGIN
    SELECT * FROM vaccine;
END ;;
DELIMITER ;

DROP PROCEDURE IF EXISTS GET_VACCINE; -- OBTIENE UNA VACUNA ESPECIFICADA
DELIMITER ;;
CREATE PROCEDURE GET_VACCINE( IN id_vaccine INT)
BEGIN
    SELECT * FROM vaccine v WHERE v.id_vaccine = id_vaccine;
END;;
DELIMITER ;

DROP PROCEDURE IF EXISTS CREATE_VACCINE; -- CREA UNA VACUNA
DELIMITER ;;
CREATE PROCEDURE CREATE_VACCINE(IN vaccine_name VARCHAR(16), IN vaccine_desc TEXT)
BEGIN
 	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
		SELECT @p2 AS MESSAGE;
		ROLLBACK;
	END;
    START TRANSACTION;
    BEGIN
        IF VACCINE_EXISTS_NAME(NORMALIZE_TEXT(vaccine_name)) THEN -- VALIDACIÓN DE QUE EXISTA LA VACUNA
            SET @message = CONCAT('YA EXISTE REGISTRO DE LA VACUNA ', vaccine_name); 
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @message;
        END IF;    
        INSERT INTO vaccine VALUES(null, NORMALIZE_TEXT(vaccine_name), NORMALIZE_TEXT(vaccine_desc));
        COMMIT;
    END;
END;;
DELIMITER ;

DROP PROCEDURE IF EXISTS UPDATE_VACCINE; -- ACTUALIZA UNA VACUNA ESPECIFICADA
DELIMITER ;;
CREATE PROCEDURE UPDATE_VACCINE(IN id_vaccine INT, IN vaccine_name VARCHAR(16), IN vaccine_desc TEXT)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        GET DIAGNOSTICS CONDITION 1 @P1 = RETURNED_SQLSTATE, @P2 = MESSAGE_TEXT;
        SELECT @P2 AS MESSAGE;
        ROLLBACK;
    END;
    START TRANSACTION;  
    BEGIN
        IF NOT VACCINE_EXISTS_ID(id_vaccine) THEN -- VALIDACIÓN DE QUE EXISTA LA VACUNA
            SET @message = CONCAT('NO HAY REGISTRO DE LA VACUNA ', id_vaccine); 
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @message;
        END IF;
            UPDATE vaccine v SET v.vaccine_name = NORMALIZE_TEXT(vaccine_name), v.vaccine_desc = NORMALIZE_TEXT(vaccine_desc) WHERE v.id_vaccine = id_vaccine;
        COMMIT;
    END;
END ;;
DELIMITER ;

DROP PROCEDURE IF EXISTS DELETE_VACCINE; -- ELIMINA UNA VACUNA DE LA TABLA
DELIMITER ;;
CREATE PROCEDURE DELETE_VACCINE(IN id_vaccine INT)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
		SELECT @p2 AS MESSAGE;
		ROLLBACK;
	END;
	START TRANSACTION;
    BEGIN
		IF NOT VACCINE_EXISTS_ID(id_vaccine) THEN -- COMPROBACION DE QUE EL REGISTRO EXISTA
			SET @message = CONCAT('NO EXISTE REGISTRO PARA ', id_vaccine); 
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @message;
        END IF;
		DELETE FROM vaccine v WHERE v.id_vaccine = id_vaccine;
		COMMIT;
    END;
END;;
DELIMITER ;

-- INVENTORY
DROP PROCEDURE IF EXISTS GET_INVENTORYS; --OBTIENE TIDOS LOS REGISTROS DEL INVENTARIO
DELIMITER ;;
CREATE PROCEDURE GET_INVENTORYS()
BEGIN
    SELECT * FROM inventory;
END;;
DELIMITER ;

DROP PROCEDURE IF EXISTS GET_INVENTORY; -- OBTIENE UN REGISTRO ESPECIFICO DEL INVENTARIO
DELIMITER ;;
CREATE PROCEDURE GET_INVENTORY( IN id INT)
BEGIN
    SELECT * FROM inventory i WHERE i.id = id;
END;;
DELIMITER ;

DROP PROCEDURE IF EXISTS CREATE_INVENTORY; -- CREA UN REGISTRO EN INVENTARIO
DELIMITER ;;
CREATE PROCEDURE CREATE_INVENTORY(IN id_vaccine INT, IN ml DOUBLE)
BEGIN
 	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
		SELECT @p2 AS MESSAGE;
		ROLLBACK;
	END;
    START TRANSACTION;
    BEGIN
        IF NOT VACCINE_EXISTS_ID(id_vaccine) THEN -- VALIDACIÓN DE QUE EXISTA LA VACUNA PARA PODER METERLA EN INVENTARIO
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'LA VACUNA NO EXISTE ';
        END IF;    
        IF INVENTORY_EXISTS_ID(id_vaccine) AND VACCINE_EXISTS_ID(id_vaccine) THEN -- VALIDACIÓN DE QUE YA EXISTA REGISTRO DE LA VACUNA EN INVENTARIO
            SET @message = CONCAT('YA EXISTE REGISTRO DE LA VACUNA CON ID ', id_vaccine); 
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @message;
        END IF;    
        INSERT INTO inventory VALUES(null, id_vaccine, ml);
        COMMIT;
    END;
END;;
DELIMITER ;
/*
DROP PROCEDURE IF EXISTS UPDATE_INVENTORY; -- ACTUALIZA UN REGISTRO EN INVANTERIO
DELIMITER ;;
CREATE PROCEDURE UPDATE_INVENTORY(IN id_invantori INT, IN ml DOUBLE)
BEGIN
 	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
		SELECT @p2 AS MESSAGE;
		ROLLBACK;
	END;
    START TRANSACTION;
    BEGIN
        IF INVENTORY_EXISTS_ID(id_vaccine) AND VACCINE_EXISTS_ID(id_vaccine) THEN -- VALIDACIÓN DE QUE YA EXISTA REGISTRO DE LA VACUNA EN INVENTARIO
            SET @message = CONCAT('YA EXISTE REGISTRO DE LA VACUNA CON ID ', id_vaccine); 
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @message;
        END IF;    
        INSERT INTO inventory VALUES(null, id_vaccine, ml);
        COMMIT;
    END;
END;;
DELIMITER ;
--vacine inventory cow-vaccine medic-history*/

Terminar procedimiento, revisar validaciones