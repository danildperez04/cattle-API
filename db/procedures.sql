DROP FUNCTION IF EXISTS NORMALIZE_TEXT;
DELIMITER $$
CREATE FUNCTION NORMALIZE_TEXT( input VARCHAR(255) )RETURNS VARCHAR(255) DETERMINISTIC
BEGIN
	RETURN TRIM(UPPER(input));
END$$
DELIMITER ;

-- COWS
DROP FUNCTION IF EXISTS COW_EXISTS;
DELIMITER ;; 
CREATE FUNCTION COW_EXISTS(id_cow INT) RETURNS BOOLEAN DETERMINISTIC -- RETORNA VERDADERO EN CASO DE QUE LA VACA EXISTA
BEGIN
	DECLARE id INT;
	SELECT c.id_cow FROM cow_view c WHERE c.id_cow = id_cow INTO id;
    IF id IS NULL THEN
		RETURN FALSE;
    END IF;
	RETURN TRUE;
END;;
DELIMITER ;

DROP PROCEDURE IF EXISTS GET_COWS; -- OBTIENE TODAS LAS VACAS DE LA TABLA
DELIMITER ;; 
CREATE PROCEDURE GET_COWS()
BEGIN
	SELECT * FROM cow_view;
END;;
DELIMITER ;

DROP PROCEDURE IF EXISTS GET_COW;
DELIMITER ;;
CREATE PROCEDURE GET_COW(IN id INT) -- OBTIENE UNA VACA DE LA TABLA
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
		SELECT @p2 AS MESSAGE;
		ROLLBACK;
	END;
    START TRANSACTION;
    BEGIN
		IF NOT COW_EXISTS(id) THEN -- COMPROBACION DE QUE LA VACA EXISTE
			SET @message = CONCAT('No existe registro para ', id);
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @message;
		END IF;
	END;
END;;
DELIMITER ;

DROP PROCEDURE IF EXISTS CREATE_COW;
DELIMITER ;; -- CREA UN REGISTRO EN LA TABLA COW
CREATE PROCEDURE CREATE_COW(IN cow_name VARCHAR(30), IN cow_desc VARCHAR(10), IN alive BOOLEAN, IN heat DATE, IN gender VARCHAR(10), IN cow_shoes DATE, IN dehorned DATE, IN birth_date DATE)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		SELECT "HA OCURRIDO UN ERROR" AS MESSAGE;
		ROLLBACK;
	END;
    START TRANSACTION;
    BEGIN
		INSERT INTO cow VALUES(null, NORMALIZE_TEXT(cow_name), NORMALIZE_TEXT(cow_desc), alive, heat, NORMALIZE_TEXT(gender), cow_shoes, dehorned, birth_date); -- TODO: FINISH this
		COMMIT;
    END;
END;;
DELIMITER ;

DROP PROCEDURE IF EXISTS UPDATE_COW; -- ACTUALIZA LOS CAMPOS DE LA VACA ESPECIFICADA
DELIMITER ;;
CREATE PROCEDURE UPDATE_COW(IN id_cow INT, cow_name VARCHAR(30), IN cow_desc VARCHAR(10), IN alive BOOLEAN, IN heat DATE, IN gender VARCHAR(10), IN cow_shoes DATE, IN dehorned DATE, IN birth_date DATE)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
		SELECT @p2 AS MESSAGE;
		ROLLBACK;
	END;
	START TRANSACTION;
    BEGIN
		IF (SELECT NOT c.alive FROM cow c WHERE c.id_cow = id_cow) THEN -- COMPROBACION DE QUE LA VACA ESTE VIVA
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No se puede hacer ninguna operacion con una vaca muerta';
		END IF;
        IF NOT COW_EXISTS(id_cow) THEN -- COMPROBACION DE QUE EL REGISTRO EXISTA
			SET @message = CONCAT('No existe registro para ', id); 
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @message;
        END IF;
		UPDATE cow c SET c.cow_name = NORMALIZE_TEXT(cow_name), c.cow_desc = NORMALIZE_TEXT(cow_desc), c.alive = alive, c.heat = heat, c.gender = NORMALIZE_TEXT(gender), c.cow_shoes = cow_shoes, c.dehorned = dehorned, c.birth_date = birth_date WHERE c.id_cow = id_cow;
		COMMIT;
    END;
END;;
DELIMITER ;

DROP PROCEDURE IF EXISTS DELETE_COW; -- ELIMINA UNA VACA DE LA TABLA
DELIMITER ;;
CREATE PROCEDURE DELETE_COW(IN id_cow INT)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
		SELECT @p2 AS MESSAGE;
		ROLLBACK;
	END;
	START TRANSACTION;
    BEGIN
		-- TODO: 
		COMMIT;
    END;
END;;
DELIMITER ;

-- BREED
DROP PROCEDURE IF EXISTS GET_BREEDS; -- OBTIENE TODAS LAS RAZAS
DELIMITER ;; 
CREATE PROCEDURE GET_BREEDS()
BEGIN
	SELECT * FROM breed_view;
END;;
DELIMITER ;

DROP PROCEDURE IF EXISTS GET_BREED; -- OBTIENE UNA RAZA DE LA TABLA
DELIMITER ;;
CREATE PROCEDURE GET_BREED(IN id INT)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
		SELECT @p2 AS MESSAGE;
		ROLLBACK;
	END;
    START TRANSACTION;
    BEGIN
		DECLARE exist INT;
		SELECT id_breed FROM breed_view WHERE id_breed = id INTO exist;
		IF exist IS NULL THEN
			SET @message = CONCAT('No existe registro para ', id);
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @message;
		END IF;
    END;
END;;
DELIMITER ;

DROP PROCEDURE IF EXISTS CREATE_BREED; -- CREA UN NUEVO REGISTRO PARA LAS RAZAS
DELIMITER ;;
CREATE PROCEDURE CREATE_BREED(IN breed_name VARCHAR(16))
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
		SELECT @p2 AS MESSAGE;
		ROLLBACK;
	END;
    START TRANSACTION;
    BEGIN
		INSERT INTO breed VALUES(null, NORMALIZE_TEXT(breed_name));
    END;
END;;
DELIMITER ;

DROP PROCEDURE IF EXISTS UPDATE_BREED; -- ACTUALIZA EL NOMBRE DE UNA RAZA CON EL ID ESPECIFICADO
DELIMITER ;;
CREATE PROCEDURE UPDATE_BREED(IN id_breed INT, IN breed_namebreed_name VARCHAR(16))
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
		SELECT @p2 AS MESSAGE;
		ROLLBACK;
	END;
    START TRANSACTION;
    BEGIN
		-- TODO:
    END;
END;;
DELIMITER ;

DROP PROCEDURE IF EXISTS DELETE_BREED; -- ELIMINA UNA RAZA DE LA TABLA
DELIMITER ;;
CREATE PROCEDURE DELETE_BREED(IN id_breed INT)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
		SELECT @p2 AS MESSAGE;
		ROLLBACK;
	END;
    START TRANSACTION;
    BEGIN
		-- TODO: 
    END;
END;;
DELIMITER ;

-- BREEDCOW

-- DEADCOW